/******************************************************************************
 *
 *
 *
 * Copyright (C) 2018 by Cyrille Bonamy, Julien Chauchat, Tim Nagel,
 * Antoine Mathieu, Eduard Puig Montella, Zhen Cheng and Tian-Jian Hsu.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 *
 */
/*! \page tutorials_2d3d Multi-dimensional tutorials

\tableofcontents{xml:1}

In this chapter multi-dimensional test cases are presented to illustrate the full sedFoam capabilities to deal with complex geometries as well as to provide configuration files to allow for the development of new configurations. 

\section ScourApron 2DScour: Scour downstream of an apron

In this 2D configuration, we are looking at the scour development downstream of an apron. Following the numerical study of Amoudry & Liu (2009) and Cheng et al. (2017), the scour problem
is simplified and sketched in figure 9.


\subsection preprocSA Pre-processing

This tutorial is distributed with sedFoam under the folder sedFoamDirectory/tutorials/2DScourApron.

\subsection meshgenSA Mesh generation

The numerical domain consists of a rectangle of side length L = 0.5 m in the x-y plane and of height h=0.25 m in the vertical direction z, where the flow depth is chosen to be  \f$h_0\f$ = 0.15m, and
the initial bed depth is  \f$h_b\f$ = 0.05m. A regular grid is used in the vertical direction for the sediment bed (50 elements along the vertical direction) and in horizontal direction (250 elements). Inside the water column, 100 grid points are used with an increasing cell ratio of 2 along the vertical direction. Please note that this coarse mesh is for tutorial purpose only. If you want a finer mesh you may refer to Chauchat et al. (2017). The block structure is shown in Figure 9.


@image html "sketch_apron_charlie.png" "Figure 9: Sketch of the scour downstream an apron." width=600px
@image latex "sketch_apron_charlie.png" "Figure 9: Sketch of the scour downstream an apron."

The mesh is generated by running blockMesh from within the case directory:

\verbatim
blockMesh
\endverbatim

\subsection  BC_initiSA Boundary and initial conditions

The case is set up to start at time t = 0 s, as for the previous 1D tutorials the initial fields data are stored in the 0_org sub-directory of the case directory.

The bottom boundary, the lower part of the inlet (forming the step) and of the outlet are set as wall boundaries. The upper part of the inlet is an inlet boundary where the velocity profile is imposed according to the rough wall log law (eq. (73) in Chauchat et al. (2017)) via the GroovyBC utility. Turbulent quantities are imposed as constant values following recommendation from esi group (http://www.esi-cfd.com/content/view/877/192/). At the outlet, a directionMixed boundary condition is used for the velocities of both phases (zeroGradient for streamwise component and zero value for the vertical one) and the hydrostatic pressure is imposed thanks to the GroovyBC utility. 
As initial condition, the velocity of both phases, the sediment concentration, the TKE and the TKE dissipation are set based on one-dimensional simulation results using funkySetFields. The details of the boundary conditions are summarized in the following table:

<table>
<caption id="multi_row">Summary of the boundary conditions implemented in the 2D scour downstream of an apron configuration: zG = zeroGradient, fV = fixedValue, dM = directionMixed, fFP = fixedFluxPressure and hp=hydrostatic pressure.</caption>
<tr><th>Boundary  	<th>type  	<th>\f$\alpha\f$  <th>k  			<th>\f$\varepsilon\f$ or \f$\omega\f$   <th>\f$u^k\f$  		<th>p  	    <th>\f$\theta\f$ (for KT)
<tr><td>top	  	<td>patch	<td>zG       	  <td>zG       			<td>zG       				<td>zG         		<td>zG       <td>zG
<tr><td>bottom    	<td>wall        <td>zG            <td>zG       			<td>zG       				<td>fV,\f$u^k=0\f$      <td>fFP      <td>zG
<tr><td>inlet (flow)    <td>patch       <td>1dprof    	  <td>fV, k=1\f$\times 10^{-4}\f$ <td>zG                                  <td>Gbc          <td>zG       <td>fV, k=1\f$\times 10^{-6}\f$
<tr><td>inlet (sed)     <td>wall        <td>zG            <td>fV, k=1\f$\time 10^{-12}\f$<td>zG                                  <td>fV,\f$u^k=0\f$      <td>zG       <td>zG
<tr><td>outlet (flow)   <td>patch       <td>zG            <td>zG                        <td>zG                                  <td>dM                  <td>hp       <td>zG
<tr><td>outlet (sed)    <td>wall        <td>zG            <td>fV, k=1\f$\time 10^{-12}\f$<td>zG                                  <td>fV,\f$u^k=0\f$      <td>hp       <td>zG
</table> 

\subsection PhysPropSA Physical properties

The transportProperties file for the 2DScourApron case is shown below:

\verbatim
phasea
{
    rho             rho [ 1 -3 0 0 0 ] 2650;
    nu              nu [ 0 2 -1 0 0 ] 1e-6;
    d               d [ 0 1 0 0 0 0 0 ] 0.25e-3;
    sF              sF   [ 0 0  0 0 0 0 0 ] 1.;    // shape Factor to adjust settling velocity for non-spherical particles
    hExp            hExp [ 0 0  0 0 0 0 0 ] 2.65;  // hindrance exponent for drag: beta^(-hExp) (2.65 by default)
}

phaseb
{
    rho             rho [ 1 -3 0 0 0 ] 1000;
    nu              nu [ 0 2 -1 0 0 ] 1.e-06;
    d               d [ 0 1 0 0 0 0 0 ] 10e-6;
    sF              sF   [ 0 0  0 0 0 0 0 ] 1.;
    hExp            hExp [ 0 0  0 0 0 0 0 ] 2.65;
}
//*********************************************************************** //

alphaSmall      alphaSmall [ 0 0 0 0 0 0 0 ] 1e-6;  // minimum volume fraction (phase a) for division by alpha 

alphaAlpha      alphaAlpha [ 0 0 0 0 0 ] 0;         // surface tension

Cvm             Cvm [ 0 0 0 0 0 ] 0;                // Virtual/Added Mass coefficient

Cl              Cl [ 0 0 0 0 0 ] 0;                 // Lift force coefficient

Ct              Ct [ 0 0 0 0 0 ] 0;                 // Eddy diffusivity coefficient for phase a


transportModel  Newtonian;

nu              nu [ 0 2 -1 0 0 0 0 ] 1e-06;

nuMax        nuMax [0 2 -1 0 0 0 0] 0.1;      // viscosity limiter for the Frictional model (required for stability)
\endverbatim

The physical property of the particles (diameter and density) and of the fluid (density and kinematic viscosity) have been set to the values given in Amoudry & Liu (2009).

For this case, the dense granular flow rheology \f$\mu(I)\f$ is used and the parameters are set according to Chauchat (2017). Furthermore a shear induced pressure (PPressureModel) and an effective fluid viscosity model (FluidViscosityModel) from Boyer et al. (2011) are used:

\verbatim
granularRheology   on;

alphaMaxG       alphaMaxG [ 0 0 0 0 0 0 0 ] 0.625;

mus             mus  [ 0 0 0 0 0 0 0 ] 0.4;

mu2             mu2  [ 0 0 0 0 0 0 0 ] 0.9;

I0              I0  [ 0 0 0 0 0 0 0 ] 0.6;

Bphi            Bphi [ 0 0 0 0 0 0 0 ] 0.66;

n               n [ 0 0 0 0 0 0 0 ] 2.5;

Dsmall          Dsmall [ 0 0 -1 0 0 0 0 ] 1e-4;

relaxPa         relaxPa [ 0 0 0 0 0 0 0 ] 1;

zbed         zbed [ 0 1 0 0 0 0 0 ] 0.0;

FrictionModel  MuI;

PPressureModel MuI;

FluidViscosityModel  BoyerEtAl;
\endverbatim

\subsection Disc_solvSF2 Discretisation and linear-solver settings

The numerical schemes and the solvers are the same as in the 1DSheetFlow case.

\subsection control_sedFoamSF2 Control

The system/controlDict file indicates that for this case the time step is equal to \f$ 2.10^{-5}\f$ s and that the computation ends at 60s of dynamics. The output write interval has been set to 5s by default. The user is invited to reduce it in order to capture the evolution of the scour hole more accurately. Additionally,  time step can be increased to \f$ 2.10^{-4}\f$ s after 2s to speed up the computational time.

\verbatim
application     sedFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         60;

deltaT          2e-5;

writeControl    adjustableRunTime;

writeInterval   0.5;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable on;

adjustTimeStep  true;

maxCo           0.05;

maxAlphaCo      0.05;

maxDeltaT       2e-5;

libs (
"libgroovyBC.so"
"libgroovyStandardBCs.so"
     );
\endverbatim

\subsection  lauch_SA Computation launching

As for the previous cases, you can lauch the computation by executing * Allrun *. This shell script contains two lines specific to the present multidimensionnal case:

\verbatim
# Decompose the case in order to run in parallel (on 4 cores)
decomposePar

# Run sedFoam_rbgh in parallel
mpirun -np 4 sedFoam_rbgh -parallel > log&
\endverbatim
First of all, as the mesh is composed of 37500 cells, computation runs faster on several processors (the best compromise is around 10000 cells per core). Here, the *decomposePar* command decompose the initial time (specified in the *controlDict* file) in the number of part specified in the *system/decomposeParDict* file.

The second command specify that the computation is launched in parallel with *mpirun*.

\subsection postSF2 Post-processing using python

You just have to run the python script *plot_tuto2DScour.py* located in the folder *tutorials/Py*:

\verbatim
python plot_tuto2DScour.py
\endverbatim

and you should see the following figures:

@image html "res1_tuto4.png" "Figure 10: Sediment interface position at different times during the scour process using a k-omega turbulence model and the mu(I) granular rheology." width=600px
@image latex "res1_tuto4.png" "Figure 10: Sediment interface position at different times during the scour process using a k-omega turbulence model and the mu(I) granular rheology."
@image html "res2_tuto4.png" "Figure 11: Sediment concentration contour at different times during the scour process using a k-omega turbulence model and the mu(I) granular rheology." width=600px
@image latex "res2_tuto4.png" "Figure 11: Sediment concentration contour at different times during the scour process using a k-omega turbulence model and the mu(I) granular rheology."



\section Scour2DCylinder 2DPipelineScour: Scour around an horizontal cylinder

In this tutorial, the experimental configuration investigating scour under a submarine pipeline from Mao (1986) is reproduced numerically.

\subsection preprocSP Pre-processing

This tutorial is distributed with sedFoam under the folder sedFoamDirectory/tutorials/2DPipelineScour.

\subsection meshgen_SP Mesh generation

The numerical domain dimensions presented in figure 12. A cylinder of diameter \f$ D=5cm \f$ is placed 15 diameters away from the inlet. The overall domain dimensions were 35 diameters long and 6.1 diameters high. The mesh is generated using the OpenFOAM utilities blockMesh and snappyHexMesh. The mesh generated with blockMesh is a simple rectangle with regular grid spacing excepted in the vertical direction where cells are expanding toward the top boundary. The snappyHexMesh utility uses the file Cyl.stl located in the constant/triSurface directory containing the cylinder geometry to remove mesh cells inside it, add layers of cells around the cylinder and refine cells in regions of high concentration gradient at the bed. 

@image html "sketch_2DPipelineScour.png" "Figure 12: Sketch of the scour under a submarine pipeline." width=600px
@image latex "sketch_2DPipelineScour.png" "Figure 12: Sketch of the scour under a submarine pipeline."

Depending on the turbulence model used, the number of layers should not be the same to accurately predict the boundary layer around the cylinder. The default snappyHexMeshDict in the system directory is written to perform simulations using the \f$ k-\omega \f$ turbulence model. For simulations using the \f$ k-\varepsilon \f$ model, the user should use/rename the file snappyHexMeshDict_kEpsilon located in the system directory to generate the mesh.

\subsection  BC_init_SP Boundary and initial conditions

The case is set up to start at time t = 0 s, as for the previous tutorials the initial fields data are stored in the 0_org sub-directory of the case directory.

The top boundary condition is a symmetryPlane. The outlet pressure is set to 0. The outlet boundary condition for the velocity is inletOulet corresponding to a homogeneous Neumann boundary condition for outgoing flows and a homogeneous Dirichlet boundary condition for incoming flows. The inlet is decomposed into two parts. From the bottom to \f$ y = 1.5D \f$, a wall-type boundary condition is applied. From \f$ y = 1.5D \f$ to the top, a rough wall log law velocity profile is used following the expression \f$ u_x(y) = \frac{u_*}{\kappa}ln\left(\frac{30y}{k_s}\right)  \f$

with \f$ u_*=0.04318m/s \f$ the bottom friction velocity, \f$ \kappa=0.41 \f$ the von Karman constant and \f$ k_s=2.5d \f$ the Nikuradse roughness length. The velocity is increased linearly during the first 4 seconds of the simulation. Inlet values for turbulent quantities were set following \f$ k = 10 \times 10^{-4} \overline U \f$, \f$ \varepsilon = k^{3/2} /0.1 h \f$ and \f$ \omega = k^{1/2} /0.1 C_\mu h \f$ with \f$ \overline U=0.87m/s \f$ the bulk velocity, \f$ h \f$ the distance from the bed to the top boundary and \f$ C_\mu=0.09 \f$ an empirical constant.

The sediment bed is initialised using the expression \f$ \alpha_{Init}=0.6128*0.5*\left[1+tanh\left(-\dfrac{0.026+y}{0.001}\right)\right] \f$.


\subsection PhysProp_SP Physical properties

The transportProperties file for the 2DPipelineScour case is shown below:

\verbatim
phasea
{
    rho             rho [ 1 -3 0 0 0 ] 2650;
    nu              nu [ 0 2 -1 0 0 ] 1e-6;
    d               d [ 0 1 0 0 0 0 0 ] 0.36e-3;
    sF              sF   [ 0 0  0 0 0 0 0 ] 1.;    // shape Factor to adjust settling velocity for non-spherical particles
    hExp            hExp [ 0 0  0 0 0 0 0 ] 2.65;  // hindrance exponent for drag: beta^(-hExp) (2.65 by default)
}

phaseb
{
    rho             rho [ 1 -3 0 0 0 ] 1000;
    nu              nu [ 0 2 -1 0 0 ] 1.e-06;
    d               d [ 0 1 0 0 0 0 0 ] 10e-6;
    sF              sF   [ 0 0  0 0 0 0 0 ] 1.;
    hExp            hExp [ 0 0  0 0 0 0 0 ] 2.65;
}
//*********************************************************************** //

alphaSmall      alphaSmall [ 0 0 0 0 0 0 0 ] 1e-4;  // minimum volume fraction (phase a) for division by alpha 

alphaAlpha      alphaAlpha [ 0 0 0 0 0 ] 0;         // surface tension

Cvm             Cvm [ 0 0 0 0 0 ] 0;                // Virtual/Added Mass coefficient

Cl              Cl [ 0 0 0 0 0 ] 0;                 // Lift force coefficient


transportModel  Newtonian;

nu              nu [ 0 2 -1 0 0 0 0 ] 1e-06;
nuMax        nuMax [0 2 -1 0 0 0 0] 10;      // viscosity limiter for the Frictional model (required for stability)
\endverbatim

The physical property of the particles (diameter and density) and of the fluid (density and kinematic viscosity) have been set to the values given in Mao (1986).

\subsection control_SP Control

The system/controlDict file indicates that for this case the time step is adaptative to have a maximum Courant number (maxCo) below 0.1 and that the computation ends at 45s of dynamics.

\verbatim
application     sedFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         45;

deltaT          1.e-4;

writeControl    adjustableRunTime;

writeInterval   0.5;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression false;

timeFormat      general;

timePrecision   6;

runTimeModifiable on;

adjustTimeStep  yes;

maxCo           0.1;

maxAlphaCo      0.1;

maxDeltaT       15.e-5;

libs (
);
\endverbatim

\subsection  lauch_SP Computation launching

As for the previous case, you can lauch the computation by executing * Allrun *. The simulations is run in parallel on 16 cores.

\subsection post_SP Post-processing using python

The post-processing python scripts plot_profiles2DPipelineScour.py and plot_depth2DPipelineScour.py are located in the folder tutorials/Py.

The script _profiles2DPipelineScour.py plots bed profiles at 11s, 18s and 25s compared with experimental data like in the following figure:

@image html "bed_profiles_kEpsilon.png" "Figure 13: Sediment bed profiles at 11s (top), 18s (middle) and 25s (bottom) using a \f$ k-\omega \f$ turbulence model." width=600px
@image latex "bed_profiles_kEpsilon.png" "Figure 13: Sediment bed profiles at 11s (top), 18s (middle) and 25s (bottom) using a \f$ k-\omega \f$ turbulence model."

The script plot_depth2DPipelineScour.py plots the maximum scour depth compared with experimental data like in the following figure:

@image html "maximum_depth_kEpsilon.png" "Figure 14: Maximum scour depth using a k-omega turbulence model." width=600px
@image latex "maximum_depth_kEpsilon.png" "Figure 14: Maximum scour depth using a k-omega turbulence model."

\section Scour3DCylinder 3DScourCylinder: Scour around a vertical cylinder

under construction





*/
