/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         backward;//Euler implicit;
}

gradSchemes
{
        default         Gauss linear;
}

divSchemes
{
    default         Gauss linear;
// alphaEqn
    div(phi,alpha)  Gauss limitedLinear01 1;
    div(phir,alpha) Gauss limitedLinear01 1;
// UEqn
    div(phi.a,U.a)    Gauss filteredLinear2V 1 0;//limitedLinearV 1;
    div(phi.b,U.b)    Gauss filteredLinear2V 1 0;//limitedLinearV 1;
    div(phiRa,Ua)   Gauss filteredLinear2V 1 0;//limitedLinearV 1;
    div(phiRb,Ub)   Gauss filteredLinear2V 1 0;//limitedLinearV 1;
    div(Rca)        Gauss linear;
    div(Rcb)        Gauss linear;
// pEqn
    div(alpha,nu)   Gauss linear;
// Turbulence
    div(betaPhi.b,flmb.b)   Gauss limitedLinear 1;
    div(betaPhi.b,fmmb.b)   Gauss limitedLinear 1;
    div(alphaPhi.a,flma.a) Gauss limitedLinear 1;
    div(alphaPhi.a,fmma.a) Gauss limitedLinear 1;
    div(phi.b,k.b)     Gauss limitedLinear 1;
    div(phi.b,epsilon.b) Gauss limitedLinear 1;
// ThetaEqn
    div(phi,Theta)  Gauss limitedLinear 1;
// alphaPlastic
    div(phia,alphaPlastic)    Gauss upwind;
// pa
    div(phia,pa_new_value)    Gauss upwind;
}

laplacianSchemes
{
    default         Gauss linear uncorrected;
// UEqn
    laplacian(nuEffa,U.a) Gauss linear uncorrected;
    laplacian(nuEffb,U.b) Gauss linear uncorrected;
    laplacian(nuFra,U.a)  Gauss linear uncorrected;
// pEqn
    laplacian((rho*(1|A(U))),p_rbgh) Gauss linear uncorrected;
// k and EpsilonEqn 
    laplacian(DkEff,k.b) Gauss linear uncorrected;
    laplacian(DkEff,beta) Gauss linear uncorrected;
    laplacian(DepsilonEff,epsilon.b) Gauss linear uncorrected;
    laplacian(DepsilonEff,beta) Gauss linear uncorrected;
    laplacian(DomegaEff,omega.b) Gauss linear uncorrected;
//ThetaEqn
    laplacian(kappa,Theta) Gauss linear uncorrected;
}

interpolationSchemes
{
    default  linear;
}

snGradSchemes
{
    default         uncorrected;
}

fluxRequired
{
    default         no;
    p_rbgh            ;
}

wallDist
{
    method meshWave;
  
    // Optional entry enabling the calculation
    // of the normal-to-wall field
    nRequired false;
  
    // Optional entry delaying wall distance update to every n steps
    // Default is 1 (update every step)
    updateInterval 5;
}

// ************************************************************************* //
