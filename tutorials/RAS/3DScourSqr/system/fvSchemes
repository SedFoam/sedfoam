/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         backward;
}

gradSchemes
{
        default         Gauss linear;
//        grad(k.b)        cellLimited Gauss linear 1;
//        grad(omega.b)    cellLimited Gauss linear 1;
}

divSchemes
{
    default        Gauss linear;
    div(alphaUa)    Gauss linear;
// alphaEqn
    div(phi,alpha)  Gauss limitedLinear01 1;
    div(phir,alpha) Gauss limitedLinear01 1;
// UEqn
    div(phi.a,U.a)    Gauss limitedLinear 1;
    div(phi.b,U.b)    Gauss limitedLinear 1;
    div(phiRa,Ua)     Gauss linear;
    div(phiRb,Ub)     Gauss linear;
    div(Rca)          Gauss linear;
    div(Rcb)          Gauss linear;
// pEqn
    div(alpha,nu) Gauss linear;
// k and EpsilonEqn
    div(phi.b,k.b)     Gauss limitedLinear 1;
    div(phi.b,epsilon.b) Gauss limitedLinear 1;
    div(phi.b,omega.b) Gauss limitedLinear 1;
// ThetaEqn
    div(phi,Theta)  Gauss limitedLinear 1; //Gauss linearUpwind
// alphaPlastic
    div(phi.a,alphaPlastic)    Gauss upwind;
// pa
    div(phia,pa_new_value)    Gauss upwind;
}

laplacianSchemes
{
    default         none;
// alphaEqn
    laplacian(alphaPpMag,alpha) Gauss linear corrected;
// UEqn
    laplacian(nuEffa,U.a) Gauss linear corrected;
    laplacian(nuEffb,U.b) Gauss linear corrected;
    laplacian(nuFra,U.a)  Gauss linear corrected;
    laplacian(U.b)	  Gauss linear corrected;
// pEqn
    laplacian((rho*(1|A(U))),p_rbgh) Gauss linear corrected;
// k and EpsilonEqn 
    laplacian(DkEff,k.b) Gauss linear corrected;
    laplacian(DkEff,beta) Gauss linear corrected;
    laplacian(DepsilonEff,epsilon.b) Gauss linear corrected;
    laplacian(DomegaEff,omega.b) Gauss linear corrected;
    laplacian(DepsilonEff,beta) Gauss linear corrected;
//ThetaEqn
    laplacian(kappa,Theta) Gauss linear corrected;
    laplacian(kappa2,alpha) Gauss linear corrected;
    laplacian(kappaAlpha,alpha) Gauss linear corrected;
}

interpolationSchemes
{
    default  linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    p_rbgh               ;
}


// ************************************************************************* //
